@using TodoList
@using Microsoft.FluentUI.AspNetCore.Components

@page "/todo"
@rendermode InteractiveServer

<PageTitle>Todo</PageTitle>

<h3>Payers (Count: @payers.Count())</h3>

<FluentGrid Justify="JustifyContent.FlexStart" Spacing="3">
    <FluentGridItem xs="12" sm="6">
        <FluentSortableList Id="dragHandles" Handle="true" Items="payerIds" OnUpdate="args => SortList(args, payerIds)"
            Context="payerId">
            <ItemTemplate>
                <span class="sortable-grab" style="cursor: move;">
                    <FluentIcon Value="@(new Icons.Regular.Size20.ArrowSort())" />
                </span>
                <span class="sortable-item">
                    <input @bind="payers[payerId]" />
                    <FluentIcon Value="@(new Icons.Regular.Size20.Delete())" @onclick="() => DeletePayer(payerId)" />
                </span>
            </ItemTemplate>
        </FluentSortableList>
    </FluentGridItem>
</FluentGrid>

@* <form @onsubmit="AddPayer" class="row g-1 bg-light border rounded p-1">
<div class="col-4">
<input type="text" class="form-control" placeholder="Add new payer" @bind="newPayerName" />
</div>
<div class="col-2">
<button type="submit" class="btn btn-primary">Add Payer</button>
</div>
</form> *@

<div class="d-flex justify-content-left my-2">
    <form @onsubmit="AddPayer" class="row g-1 bg-light border rounded p-1">
        <div class="col-auto">
            <input type="text" class="form-control" placeholder="Add new payer" @bind="newPayerName" />
        </div>
        <div class="col-auto">
            <button type="submit" class="btn btn-primary">Add Payer</button>
        </div>
    </form>
</div>


@code {
    private Dictionary<int, string> payers = new();
    private List<int> payerIds = new();
    private string? newPayerName = "Payer 1"; // "Payer 1" is the default payer
    private int payerIndex = 1;

    private void AddPayer()
    {
        if (!string.IsNullOrWhiteSpace(newPayerName))
        {
            payers.Add(payerIndex, newPayerName);
            payerIds.Add(payerIndex);
            while (payers.ContainsKey(payerIndex))
            {
                payerIndex++;
            }
            int i = 1;
            bool nameIsTaken = true;
            string newName = $"Payer {i}";
            while (nameIsTaken)
            {
                nameIsTaken = false;
                foreach (string payerName in payers.Values)
                {
                    if (payerName == newName)
                    {
                        nameIsTaken = true;
                        break;
                    }
                }
                if (!nameIsTaken)
                {
                    break;
                }
                i++;
                newName = $"Payer {i}";
            }

            newPayerName = newName;
        }
    }

    private void DeletePayer(int payerId)
    {
        payers.Remove(payerId);
        payerIds.Remove(payerId);
        if (payerId < payerIndex)
        {
            payerIndex = payerId;
        }
        newPayerName = $"Payer {payerIndex}";
    }
}

<h3>Owners (Count: @owners.Count())</h3>

<FluentGrid Justify="JustifyContent.FlexStart" Spacing="3">
    <FluentGridItem xs="12" sm="6">
        <FluentSortableList Id="dragHandles" Handle="true" Items="ownerIds" OnUpdate="args => SortList(args, ownerIds)"
            Context="ownerId">
            <ItemTemplate>
                <span class="sortable-grab" style="cursor: move;">
                    <FluentIcon Value="@(new Icons.Regular.Size20.ArrowSort())" />
                </span>
                <span class="sortable-item">
                    <input @bind="owners[ownerId]" />
                    <FluentIcon Value="@(new Icons.Regular.Size20.Delete())" @onclick="() => DeleteOwner(ownerId)" />
                </span>
            </ItemTemplate>
        </FluentSortableList>
    </FluentGridItem>
</FluentGrid>

<div class="d-flex justify-content-left my-2">
    <form @onsubmit="AddOwner" class="row g-1 bg-light border rounded p-1">
        <div class="col-auto">
            <input type="text" class="form-control" placeholder="Add new owner (payee)" @bind="newOwnerName" />
        </div>
        <div class="col-auto">
            <button type="submit" class="btn btn-primary">Add Owner</button>
        </div>
    </form>
</div>

@code {
    private Dictionary<int, string> owners = new();
    private List<int> ownerIds = new();
    private string? newOwnerName = "Owner 1"; // "Owner 1" is the default owner
    private int ownerIndex = 1;

    private void AddOwner()
    {
        if (!string.IsNullOrWhiteSpace(newOwnerName))
        {
            owners.Add(ownerIndex, newOwnerName);
            ownerIds.Add(ownerIndex);
            while (owners.ContainsKey(ownerIndex))
            {
                ownerIndex++;
            }
            int i = 1;
            bool nameIsTaken = true;
            string newName = $"Owner {i}";
            while (nameIsTaken)
            {
                nameIsTaken = false;
                foreach (string ownerName in owners.Values)
                {
                    if (ownerName == newName)
                    {
                        nameIsTaken = true;
                        break;
                    }
                }
                if (!nameIsTaken)
                {
                    break;
                }
                i++;
                newName = $"Owner {i}";
            }

            newOwnerName = newName;
        }
    }

    private void DeleteOwner(int ownerId)
    {
        owners.Remove(ownerId);
        ownerIds.Remove(ownerId);
        if (ownerId < ownerIndex)
        {
            ownerIndex = ownerId;
        }
        newOwnerName = $"Owner {ownerIndex}";
    }
}


<h3>Items (Count: @items.Count, Total price: @items.Sum(i => i.Price)), Total quantity: @items.Sum(i => i.Quantity))
</h3>


<FluentGrid Justify="JustifyContent.FlexStart" Spacing="3">
    <FluentGridItem xs="12" sm="6">
        <FluentSortableList Id="dragHandles" Handle="true" Items="items" OnUpdate="args => SortList(args, items)"
            Context="item">
            <ItemTemplate>
                <span class="sortable-grab" style="cursor: move;">
                    <FluentIcon Value="@(new Icons.Regular.Size20.ArrowSort())" />
                </span>
                <span class="sortable-item">
                    <input class="form-control" @bind="item.Title" />
                    <input class="form-control" @bind="item.Price" />
                    <input class="form-control" @bind="item.Quantity" />
                    <select @bind="item.PayerId">
                        <option value="0">Select payer</option>
                        @foreach (var payerId in payerIds)
                        {
                            <option value="@payerId">@payers[payerId]</option>
                        }
                    </select>
                    <select @bind="item.OwnerId">
                        <option value="0">Select owner</option>
                        @foreach (var ownerId in ownerIds)
                        {
                            <option value="@ownerId">@owners[ownerId]</option>
                        }
                    </select>
                    <FluentIcon Value="@(new Icons.Regular.Size20.Delete())" @onclick="() => items.Remove(item)"
                        class="col-12" />
                </span>
            </ItemTemplate>
        </FluentSortableList>
    </FluentGridItem>
</FluentGrid>

<div class="d-inline-flex justify-content-left my-2 flex-wrap">
    <form @onsubmit="AddItem" class="row g-1 bg-light border rounded p-1 flex-wrap">
        <div class="col-5">
            <input type="text" class="form-control" placeholder="Add new item" @bind="newItemTitle" />
        </div>
        <div class="col-1">
            <input type="number" class="form-control" placeholder="Paid" @bind="newItemPrice" />
        </div>
        <div class="col-1">
            <input type="number" class="form-control" placeholder="Quantity" @bind="newItemQuantity" />
        </div>
        <div class="col-auto">
            <select @bind="newItemPayerId" class="form-select" style="width: fit-content;">
                <option selected value="0">Select payer...</option>
                @foreach (var payerId in payerIds)
                {
                    <option value="@payerId">@payers[payerId]</option>
                }
            </select>
        </div>
        <div class="col-auto">
            <select @bind="newItemOwnerId" class="form-select" style="width: fit-content;">
                <option selected value="0">Select owner...</option>
                @foreach (var ownerId in ownerIds)
                {
                    <option value="@ownerId">@owners[ownerId]</option>
                }
            </select>
        </div>
        <div class="col-auto">
            <button type="submit" class="btn btn-primary">Add item</button>
        </div>
    </form>
</div>


@code {
    private List<Item> items = new();
    public string? newItemTitle;
    public string? defaultItemTitle = "Item 1";
    public double? newItemPrice = 0;
    public double? newItemQuantity = 1;
    public int? newItemPayerId;
    public int? newItemOwnerId;

    private void AddItem()
    {
        items.Add(new Item
            {
                Title = string.IsNullOrWhiteSpace(newItemTitle) ? defaultItemTitle : newItemTitle,
                Price = newItemPrice ?? 0,
                Quantity = newItemQuantity ?? 1,
                PayerId = newItemPayerId == 0 ? null : newItemPayerId,
                OwnerId = newItemOwnerId == 0 ? null : newItemOwnerId
            });
        newItemTitle = string.Empty;
        newItemPrice = null;
        newItemQuantity = null;
        newItemPayerId = null;
        newItemOwnerId = null;

        int i = 1;
        bool nameIsTaken = true;
        string newName = $"Item {i}";
        while (nameIsTaken)
        {
            nameIsTaken = false;
            foreach (Item item in items)
            {
                if (item.Title?.Trim() == newName)
                {
                    nameIsTaken = true;
                    break;
                }
            }
            if (!nameIsTaken)
            {
                break;
            }
            i++;
            newName = $"Item {i}";
        }

        defaultItemTitle = newName;
    }
}


@code {
    private void SortList<T>(FluentSortableListEventArgs args, List<T> myitems)
    {
        if (args is null || args.OldIndex == args.NewIndex)
        {
            return;
        }

        var oldIndex = args.OldIndex;
        var newIndex = args.NewIndex;

        @* var myitems = this.myitems; *@
        var itemToMove = myitems[oldIndex];
        myitems.RemoveAt(oldIndex);

        if (newIndex < myitems.Count)
        {
            myitems.Insert(newIndex, itemToMove);
        }
        else
        {
            myitems.Add(itemToMove);
        }
    }
}
