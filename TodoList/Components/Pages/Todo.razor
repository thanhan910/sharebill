@using TodoList
@using Microsoft.FluentUI.AspNetCore.Components

@page "/todo"
@rendermode InteractiveServer

<PageTitle>Share Bill Calculator</PageTitle>

<h3>Participants (Count: @peopleIds.Count())</h3>

<FluentGrid Justify="JustifyContent.FlexStart" Spacing="3">
    <FluentGridItem xs="12" sm="4">
        <FluentSortableList Id="dragHandles" Handle="true" Items="peopleIds"
            OnUpdate="args => SortList(args, peopleIds)" Context="personId">
            <ItemTemplate>
                <span class="sortable-item">
                    <input @bind="peopleMap[personId]" type="text" style="border: none; background: transparent; outline: none;" />
                    <FluentIcon Value="@(new Icons.Regular.Size20.Delete())" @onclick="() => DeletePerson(personId)" />
                </span>
                <span class="sortable-grab" style="cursor: move;">
                    <FluentIcon Value="@(new Icons.Regular.Size20.ArrowSort())" />
                </span>
            </ItemTemplate>
        </FluentSortableList>
    </FluentGridItem>
</FluentGrid>

<div class="d-flex justify-content-left my-2">
    <form @onsubmit="AddPerson" class="row g-1 bg-light border rounded p-1">
        <div class="col-auto">
            <input type="text" class="form-control" placeholder="Add new participant" @bind="newPersonName" />
        </div>
        <div class="col-auto">
            <button type="submit" class="btn btn-primary">Add person</button>
        </div>
    </form>
</div>

@code {
    private Dictionary<int, string> peopleMap = new Dictionary<int, string> { { 1, "Person 1" }, { 2, "Person 2" }, { 3,
"Person 3" } };
    private List<int> peopleIds = new List<int> { 1, 2, 3 };
    private string? newPersonName;
    private string? defaultPersonName = "Person 4"; // "Person 1" is the default name
    private int personIndex = 4;

    private void AddPerson()
    {
        if (newPersonName == null)
        {
            newPersonName = defaultPersonName;
        }
        else
        {
            newPersonName = newPersonName.Trim();
            if (string.IsNullOrWhiteSpace(newPersonName))
            {
                newPersonName = defaultPersonName;
            }
        }
        if (newPersonName != null)
        {
            peopleMap.Add(personIndex, newPersonName);
        }
        peopleIds.Add(personIndex);
        while (peopleMap.ContainsKey(personIndex))
        {
            personIndex++;
        }
        int i = 1;
        bool nameIsTaken = true;
        string newName = $"Person {i}";
        while (nameIsTaken)
        {
            nameIsTaken = false;
            foreach (string personName in peopleMap.Values)
            {
                if (personName == newName)
                {
                    nameIsTaken = true;
                    break;
                }
            }
            if (!nameIsTaken)
            {
                break;
            }
            i++;
            newName = $"Person {i}";
        }
        defaultPersonName = newName;
        newPersonName = string.Empty;
    }

    private void DeletePerson(int ownerId)
    {
        peopleMap.Remove(ownerId);
        peopleIds.Remove(ownerId);
        if (ownerId < personIndex)
        {
            personIndex = ownerId;
        }
        newPersonName = string.Empty;
        defaultPersonName = $"Person {personIndex}";
    }
}



<h3>Items (Count: @items.Count, Total price: @(items.Sum(i => i.Price * 100) / 100), Total quantity: @items.Sum(i =>
    i.Quantity))
</h3>


<FluentGrid Justify="JustifyContent.FlexStart" Spacing="3">
    <FluentGridItem xs="12" sm="6">
        <FluentSortableList Id="dragHandles" Handle="true" Items="items" OnUpdate="args => SortList(args, items)"
            Context="item">
            <ItemTemplate>
                <input @bind="item.Title" type="text" style="border: none; background: transparent; outline: none;" />
                <input @bind="item.Price" type="number" step="0.01"
                    style="border: none; background: transparent; outline: none; width: 50%;" />
                <input @bind="item.Quantity" type="number" step="0.01"
                    style="border: none; background: transparent; outline: none; width: 50%;" />
                <select @bind="item.PayerId"
                    style="border: none; background: transparent; outline: none; width: fit-content;">
                    <option value="0">Select payer</option>
                    @foreach (var payerId in peopleIds)
                    {
                        <option value="@payerId">@peopleMap[payerId]</option>
                    }
                </select>
                <select @bind="item.OwnerId" style="border: none; background: transparent; outline: none;">
                    <option value="0">Select owner</option>
                    @foreach (var ownerId in peopleIds)
                    {
                        <option value="@ownerId">@peopleMap[ownerId]</option>
                    }
                </select>
                <FluentIcon Value="@(new Icons.Regular.Size20.Delete())" @onclick="() => items.Remove(item)"
                    class="col-12" />
                <span class="sortable-grab" style="cursor: move;">
                    <FluentIcon Value="@(new Icons.Regular.Size20.ArrowSort())" />
                </span>
            </ItemTemplate>
        </FluentSortableList>
    </FluentGridItem>
</FluentGrid>

<div class="d-inline-flex justify-content-left my-2 flex-wrap">
    <form @onsubmit="AddItem" class="row g-1 bg-light border rounded p-1 flex-wrap">
        <div class="col-5">
            <input type="text" class="form-control" placeholder="Add new item" @bind="newItemTitle" />
        </div>
        <div class="col-1">
            <input type="number" step="0.01" class="form-control" placeholder="Paid" @bind="newItemPrice" />
        </div>
        <div class="col-1">
            <input type="number" step="0.01" class="form-control" placeholder="Quantity" @bind="newItemQuantity" />
        </div>
        <div class="col-auto">
            <select @bind="newItemPayerId" class="form-select" style="width: fit-content;">
                <option selected value="0">Select payer...</option>
                @foreach (var payerId in peopleIds)
                {
                    <option value="@payerId">@peopleMap[payerId]</option>
                }
            </select>
        </div>
        <div class="col-auto">
            <select @bind="newItemOwnerId" class="form-select" style="width: fit-content;">
                <option selected value="0">Select owner...</option>
                @foreach (var ownerId in peopleIds)
                {
                    <option value="@ownerId">@peopleMap[ownerId]</option>
                }
            </select>
        </div>
        <div class="col-auto">
            <button type="submit" class="btn btn-primary">Add item</button>
        </div>
    </form>
</div>


@code {
    private List<Item> items = new List<Item> {
new Item { Title = "Item 1", Price = 1.23, Quantity = 1, PayerId = 1, OwnerId = 1 },
new Item { Title = "Item 2", Price = 2.34, Quantity = 2, PayerId = 2, OwnerId = 2 },
new Item { Title = "Item 3", Price = 3.45, Quantity = 3, PayerId = 3, OwnerId = 3 }
};
    public string? newItemTitle;
    public string? defaultItemTitle = "Item 1";
    public double? newItemPrice = 0;
    public double? newItemQuantity = 1;
    public int? newItemPayerId;
    public int? newItemOwnerId;

    private void AddItem()
    {
        items.Add(new Item
            {
                Title = string.IsNullOrWhiteSpace(newItemTitle) ? defaultItemTitle : newItemTitle,
                Price = newItemPrice ?? 0,
                Quantity = newItemQuantity ?? 1,
                PayerId = newItemPayerId == 0 ? null : newItemPayerId,
                OwnerId = newItemOwnerId == 0 ? null : newItemOwnerId
            });
        newItemTitle = string.Empty;
        newItemPrice = null;
        newItemQuantity = null;
        newItemPayerId = null;
        newItemOwnerId = null;

        int i = 1;
        bool nameIsTaken = true;
        string newName = $"Item {i}";
        while (nameIsTaken)
        {
            nameIsTaken = false;
            foreach (Item item in items)
            {
                if (item.Title?.Trim() == newName)
                {
                    nameIsTaken = true;
                    break;
                }
            }
            if (!nameIsTaken)
            {
                break;
            }
            i++;
            newName = $"Item {i}";
        }

        defaultItemTitle = newName;
    }
}


@code {
    private void SortList<T>(FluentSortableListEventArgs args, List<T> myitems)
    {
        if (args is null || args.OldIndex == args.NewIndex)
        {
            return;
        }

        var oldIndex = args.OldIndex;
        var newIndex = args.NewIndex;

        @* var myitems = this.myitems; *@
        var itemToMove = myitems[oldIndex];
        myitems.RemoveAt(oldIndex);

        if (newIndex < myitems.Count)
        {
            myitems.Insert(newIndex, itemToMove);
        }
        else
        {
            myitems.Add(itemToMove);
        }
    }
}
