@page "/calculator"
@rendermode InteractiveServer

@using ShareBill.Models

<PageTitle>Calculator</PageTitle>

<h1>Bill Sharing Calculator</h1>

<Clock />


<h3>Participants List</h3>

<table class="table">
  <thead>
    <tr>
      <th>Name</th>
      <th>Payer</th>
      <th>Owner</th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    @foreach (var participant in participants)
    {
      <tr>
        <td>@participant.Name</td>
        <td>@(participant.IsPayer ? "Yes" : "")</td>
        <td>@(participant.IsOwner ? "Yes" : "")</td>
        <td><button class="btn btn-danger" @onclick="() => participants.Remove(participant)">Delete</button></td>
      </tr>
    }
  </tbody>
</table>

<h3>Add Participants</h3>

<form @onsubmit="AddParticipant" class="row">
  <div class="col-sm-12 col-md-4">
    <input type="text" class="form-control" placeholder="Name" @bind="participantName" />
  </div>
  <div class="col-auto col-sm-2 col-md-1">
    <div class="form-check">
      <input type="checkbox" class="form-check-input" id="isPayer" @bind="participantIsPayer" />
      <label class="form-check-label" for="isPayer">Payer</label>
    </div>
  </div>
  <div class="col-auto col-sm-2 col-md-1">
    <div class="form-check">
      <input type="checkbox" class="form-check-input" id="isOwner" @bind="participantIsOwner" />
      <label class="form-check-label" for="isOwner">Owner</label>
    </div>
  </div>
  <div class="col-auto col-sm-2 col-md-1">
    <button type="submit" class="btn btn-primary">Add</button>
  </div>
</form>


@code {
  private string participantName = string.Empty;
  private bool participantIsPayer = true;
  private bool participantIsOwner = true;
  private List<Person> participants = new List<Person>();
  private void AddParticipant()
  {
    if (string.IsNullOrWhiteSpace(participantName))
    {
      @* participantName = DateTime.Now.ToString("yyyyMMddHHmmssfff"); *@
      participantName = "New participant";
    }
    participants.Add(new Person
      {
        Name = participantName,
        IsPayer = participantIsPayer,
        IsOwner = participantIsOwner
      });
    participantName = string.Empty;
    participantIsPayer = true;
    participantIsOwner = true;
  }
}

<h3>Products List</h3>

@* namespace ShareBill.Models
{
    public enum SplitScheme
    {
        ByUnitAmount = 0,
        ByItemCount = 1,
        ByProportion = 2,
    }

    public class Product
    {        
        public string Name { get; set; }
        // The amount bought quantified in the unit of UnitName
        public decimal Quantity { get; set; } = 1;
        public string UnitName { get; set; } = "item";
        public decimal PricePerUnit {
            get {
                return TotalPrice / Quantity;
            }
            set {
                TotalPrice = value * Quantity;
            }
        }
        public decimal TotalPrice {
            get {
                return PricePerUnit * Quantity;
            }
            set {
                Quantity = value / PricePerUnit;
            }
        }
        // Count of individual units. Differs from Quantity. E.g. 3 apples for 2 kg, 3 is ItemCount, 2 is Quantity, kg is UnitName
        public int ItemCount { get; set; } = 1;
        public SplitScheme SplitScheme { get; set; } = SplitScheme.ByUnitAmount;

        // public Product(string name, decimal quantity, string unitName, decimal pricePerUnit, int itemCount = 1)
        // {
        //     Name = name;
        //     Quantity = quantity;
        //     UnitName = unitName;
        //     PricePerUnit = pricePerUnit;
        //     ItemCount = itemCount;
        // }

        // public List<decimal> Portions { get; set; } = [1];
        // private SplitScheme _splitScheme = SplitScheme.ByItemCount;
        // public SplitScheme SplitScheme {
        //     get {
        //         return _splitScheme;
        //     }
        //     set {
        //         _splitScheme = value;
        //         Portions = _splitScheme switch
        //         {
        //             SplitScheme.ByItemCount => [ItemCount],
        //             SplitScheme.ByUnitAmount => [Quantity],
        //             SplitScheme.ByProportion => [1],
        //             _ => throw new ArgumentException("Invalid SplitScheme"),
        //         };
        //     }
        // }
    }
}  *@


<table class="table">
  <thead>
    <tr>
      <th>Name</th>
      <th>Quantity</th>
      <th>Unit</th>
      <th>Price per Unit</th>
      <th>Total Price</th>
      <th>Split Scheme</th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    @foreach (var product in products)
    {
      <tr>
        <td>@product.Name</td>
        <td>@product.Quantity</td>
        <td>@product.UnitName</td>
        <td>@product.PricePerUnit</td>
        <td>@product.TotalPrice</td>
        <td>@product.SplitScheme</td>
        <td><button class="btn btn-danger" @onclick="() => products.Remove(product)">Delete</button></td>
      </tr>
    }
  </tbody>
</table>


<h3>Add Products</h3>

<form @onsubmit="AddProduct" class="row">
  <div class="col-sm-12 col-md-4">
    <input type="text" class="form-control" placeholder="Name" @bind="product.Name" />
  </div>
  <div class="col-auto col-sm-2 col-md-1">
    <input type="number" class="form-control" placeholder="Quantity" @bind="product.Quantity" />
  </div>
  <div class="col-auto col-sm-2 col-md-1">
    <input type="text" class="form-control" placeholder="Unit" @bind="product.UnitName" />
  </div>
  <div class="col-auto col-sm-2 col-md-1">
    <input type="number" class="form-control" placeholder="Price per Unit" @bind="product.PricePerUnit" />
  </div>
  <div class="col-auto col-sm-2 col-md-1">
    <input type="number" class="form-control" placeholder="Total Price" @bind="product.TotalPrice" />
  </div>
  <div class="col-auto col-sm-2 col-md-1">
    <select class="form-control" @bind="product.SplitScheme">
      <option value="0">By Unit Amount</option>
      <option value="1">By Item Count</option>
      <option value="2">By Proportion</option>
    </select>
  </div>
  <div class="col-auto col-sm-2 col-md-1">
    <button type="submit" class="btn btn-primary">Add</button>
  </div>
</form>


@code {
  private Product product = new Product();
  @* private string productName = string.Empty;
  private string productUnitName = "item";
  private decimal productQuantity = 1;
  private decimal productPricePerUnit = 1;
  private decimal productTotalPrice = 1;
  private int productSplitSchemeId = 0;
  private Dictionary<int, SplitScheme> splitSchemes = new Dictionary<int, SplitScheme>
  {
    { 0, SplitScheme.ByUnitAmount },
    { 1, SplitScheme.ByItemCount },
    { 2, SplitScheme.ByProportion }
  }; *@
  private List<Product> products = new List<Product>();
  private void AddProduct()
  {
    if (string.IsNullOrWhiteSpace(product.Name))
    {
      product.Name = "New product";
    }
    products.Add(product);
    product = new Product();
  }
}